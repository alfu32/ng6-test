/**
 * lb4-test
 * test of looopback 4
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { LoopbackCount } from '../model/loopbackCount';
import { NewUser } from '../model/newUser';
import { User } from '../model/user';
import { UserPartial } from '../model/userPartial';
import { UserWithRelations } from '../model/userWithRelations';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class UserControllerService {

    protected basePath = 'http://localhost:3000';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(
        protected httpClient: HttpClient,
        @Optional()@Inject(BASE_PATH) basePath: string,
        @Optional() configuration: Configuration,
    ) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     *
     *
     * @param queryParams c
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userControllerCount(queryParams?: string, observe?: 'body',
    reportProgress?: boolean,
): Observable<LoopbackCount>;
    public userControllerCount(queryParams?: string, observe?: 'response',
    reportProgress?: boolean,
): Observable<HttpResponse<LoopbackCount>>;
    public userControllerCount(queryParams?: string, observe?: 'events',
    reportProgress?: boolean,
): Observable<HttpEvent<LoopbackCount>>;
    public userControllerCount(queryParams?: string, observe: any = 'body',
    reportProgress: boolean = false,
): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if ( queryParams !== undefined && queryParams !== null) {
            queryParameters = queryParameters.set('where', queryParams);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<LoopbackCount>('get', `${this.basePath}/users/count`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param body c c
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userControllerCreate(body?: NewUser, observe?: 'body',
    reportProgress?: boolean,
): Observable<User>;
    public userControllerCreate(body?: NewUser, observe?: 'response',
    reportProgress?: boolean,
): Observable<HttpResponse<User>>;
    public userControllerCreate(body?: NewUser, observe?: 'events',
    reportProgress?: boolean,
): Observable<HttpEvent<User>>;
    public userControllerCreate(body?: NewUser, observe: any = 'body',
    reportProgress: boolean = false,
): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<User>('post', `${this.basePath}/users`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id c
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userControllerDeleteById(
        id: number,
        observe?: 'body',
        reportProgress?: boolean): Observable<any>;
    public userControllerDeleteById(
        id: number,
        observe?: 'response',
        reportProgress?: boolean): Observable<HttpResponse<any>>;
    public userControllerDeleteById(
        id: number,
        observe?: 'events',
        reportProgress?: boolean): Observable<HttpEvent<any>>;
    public userControllerDeleteById(
        id: number,
        observe: any =
        'body',
        reportProgress: boolean = false,
    ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling userControllerDeleteById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete', `${this.basePath}/users/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param queryParams c
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userControllerFind(queryParams?: string, observe?: 'body',
    reportProgress?: boolean,
): Observable<Array<UserWithRelations>>;
    public userControllerFind(queryParams?: string, observe?: 'response',
    reportProgress?: boolean,
): Observable<HttpResponse<Array<UserWithRelations>>>;
    public userControllerFind(queryParams?: string, observe?: 'events',
    reportProgress?: boolean,
): Observable<HttpEvent<Array<UserWithRelations>>>;
    public userControllerFind(queryParams?: string, observe: any = 'body',
    reportProgress: boolean = false,
): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (queryParams !== undefined && queryParams !== null) {
            queryParameters = queryParameters.set('filter', queryParams);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<UserWithRelations>>('get', `${this.basePath}/users`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id c
     * @param queryParams c
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userControllerFindById(
        id: number,
        queryParams?: string,
        observe?: 'body',
        reportProgress?: boolean,
    ): Observable<UserWithRelations>;
    public userControllerFindById(
        id: number,
        queryParams?: string,
        observe?: 'response',
        reportProgress?: boolean,
    ): Observable<HttpResponse<UserWithRelations>>;
    public userControllerFindById(
        id: number,
        queryParams?: string,
        observe?: 'events',
        reportProgress?: boolean,
    ): Observable<HttpEvent<UserWithRelations>>;
    public userControllerFindById(
        id: number,
        queryParams?: string,
        observe: any = 'body',
        reportProgress: boolean = false,
    ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling userControllerFindById.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if ( queryParams !== undefined && queryParams !== null) {
            queryParameters = queryParameters.set('filter', queryParams);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<UserWithRelations>('get', `${this.basePath}/users/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id c
     * @param body c
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userControllerReplaceById(
        id: number,
        body?: User,
        observe?: 'body',
        reportProgress?: boolean,
    ): Observable<any>;
    public userControllerReplaceById(
        id: number,
        body?: User,
        observe?: 'response',
        reportProgress?: boolean,
    ): Observable<HttpResponse<any>>;
    public userControllerReplaceById(
        id: number,
        body?: User,
        observe?: 'events',
        reportProgress?: boolean,
    ): Observable<HttpEvent<any>>;
    public userControllerReplaceById(
        id: number,
        body?: User,
        observe: any = 'body',
        reportProgress: boolean = false,
    ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling userControllerReplaceById.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put', `${this.basePath}/users/${encodeURIComponent(String(id))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param body c
     * @param queryParams c
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userControllerUpdateAll(body?: UserPartial, queryParams?: string, observe?: 'body',
    reportProgress?: boolean,
): Observable<LoopbackCount>;
    public userControllerUpdateAll(body?: UserPartial, queryParams?: string, observe?: 'response',
    reportProgress?: boolean,
): Observable<HttpResponse<LoopbackCount>>;
    public userControllerUpdateAll(body?: UserPartial, queryParams?: string, observe?: 'events',
    reportProgress?: boolean,
): Observable<HttpEvent<LoopbackCount>>;
    public userControllerUpdateAll(body?: UserPartial, queryParams?: string, observe: any = 'body',
    reportProgress: boolean = false,
): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if ( queryParams !== undefined && queryParams !== null) {
            queryParameters = queryParameters.set('where', queryParams);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<LoopbackCount>('patch', `${this.basePath}/users`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id c
     * @param body c
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userControllerUpdateById(
        id: number,
        body?: UserPartial,
        observe?: 'body',
        reportProgress?: boolean,
    ): Observable<any>;
    public userControllerUpdateById(
        id: number,
        body?: UserPartial,
        observe?: 'response',
        reportProgress?: boolean,
    ): Observable<HttpResponse<any>>;
    public userControllerUpdateById(
        id: number,
        body?: UserPartial,
        observe?: 'events',
        reportProgress?: boolean,
    ): Observable<HttpEvent<any>>;
    public userControllerUpdateById(
        id: number,
        body?: UserPartial,
        observe: any = 'body',
        reportProgress: boolean = false,
    ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling userControllerUpdateById.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('patch', `${this.basePath}/users/${encodeURIComponent(String(id))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
