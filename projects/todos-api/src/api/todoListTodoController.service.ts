/**
 * lb4-test
 * test of looopback 4
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { LoopbackCount } from '../model/loopbackCount';
import { NewTodoInTodoList } from '../model/newTodoInTodoList';
import { Todo } from '../model/todo';
import { TodoPartial } from '../model/todoPartial';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class TodoListTodoControllerService {

    protected basePath = 'http://localhost:3000';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(
        protected httpClient: HttpClient,
        @Optional()@Inject(BASE_PATH) basePath: string,
        @Optional() configuration: Configuration,
    ) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * @param id
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public todoListTodoControllerCreate(
        id: number,
        body?: NewTodoInTodoList,
        observe?: 'body',
        reportProgress?: boolean,
    ): Observable<Todo>;
    public todoListTodoControllerCreate(
        id: number,
        body?: NewTodoInTodoList,
        observe?: 'response',
        reportProgress?: boolean,
    ): Observable<HttpResponse<Todo>>;
    public todoListTodoControllerCreate(
        id: number,
        body?: NewTodoInTodoList,
        observe?: 'events',
        reportProgress?: boolean,
    ): Observable<HttpEvent<Todo>>;
    public todoListTodoControllerCreate(
        id: number,
        body?: NewTodoInTodoList,
        observe: any = 'body',
        reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling todoListTodoControllerCreate.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Todo>('post', `${this.basePath}/todo-lists/${encodeURIComponent(String(id))}/todos`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id c
     * @param queryParams c
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public todoListTodoControllerDelete(
        id: number,
        queryParams?: string,
        observe?: 'body',
        reportProgress?: boolean,
    ): Observable<LoopbackCount>;
    public todoListTodoControllerDelete(
        id: number,
        queryParams?: string,
        observe?: 'response',
        reportProgress?: boolean,
    ): Observable<HttpResponse<LoopbackCount>>;
    public todoListTodoControllerDelete(
        id: number,
        queryParams?: string,
        observe?: 'events',
        reportProgress?: boolean,
    ): Observable<HttpEvent<LoopbackCount>>;
    public todoListTodoControllerDelete(
        id: number,
        queryParams?: string,
        observe: any = 'body',
        reportProgress: boolean = false,
    ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling todoListTodoControllerDelete.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if ( queryParams !== undefined && queryParams !== null) {
            queryParameters = queryParameters.set('where', queryParams);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<LoopbackCount>('delete', `${this.basePath}/todo-lists/${encodeURIComponent(String(id))}/todos`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id c
     * @param queryParams c
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public todoListTodoControllerFind(
        id: number,
        queryParams?: string,
        observe?: 'body',
        reportProgress?: boolean,
    ): Observable<Array<Todo>>;
    public todoListTodoControllerFind(
        id: number,
        queryParams?: string,
        observe?: 'response',
        reportProgress?: boolean,
    ): Observable<HttpResponse<Array<Todo>>>;
    public todoListTodoControllerFind(
        id: number,
        queryParams?: string,
        observe?: 'events',
        reportProgress?: boolean,
    ): Observable<HttpEvent<Array<Todo>>>;
    public todoListTodoControllerFind(
        id: number,
        queryParams?: string,
        observe: any = 'body',
        reportProgress: boolean = false,
    ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling todoListTodoControllerFind.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if ( queryParams !== undefined && queryParams !== null) {
            queryParameters = queryParameters.set('filter', queryParams);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Todo>>('get', `${this.basePath}/todo-lists/${encodeURIComponent(String(id))}/todos`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id comment
     * @param body comment
     * @param queryParams comment
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public todoListTodoControllerPatch(
        id: number,
        body?: TodoPartial,
        queryParams?: string,
        bserve?: 'body',
        reportProgress?: boolean,
    ): Observable<LoopbackCount>;
    public todoListTodoControllerPatch(
        id: number,
        body?: TodoPartial,
        queryParams?: string,
        bserve?: 'response',
        reportProgress?: boolean,
    ): Observable<HttpResponse<LoopbackCount>>;
    public todoListTodoControllerPatch(
        id: number,
        body?: TodoPartial,
        queryParams?: string,
        bserve?: 'events',
        reportProgress?: boolean,
    ): Observable<HttpEvent<LoopbackCount>>;
    public todoListTodoControllerPatch(
        id: number,
        body?: TodoPartial,
        queryParams?: string,
        observe: any = 'body',
        reportProgress: boolean = false,
    ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling todoListTodoControllerPatch.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if ( queryParams !== undefined && queryParams !== null) {
            queryParameters = queryParameters.set('where', queryParams);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<LoopbackCount>('patch', `${this.basePath}/todo-lists/${encodeURIComponent(String(id))}/todos`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
